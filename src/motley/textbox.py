
# std
import itertools as itt
import more_itertools as mit
import contextlib as ctx
from recipes.misc import duplicate_if_scalar
import warnings as wrn

# local
from recipes.functionals import echo0

# relative
from . import underline
from .utils import get_width, resolve_width
from . import apply, format, codes, format_partial


# TODO
# class Paragraph(str):
# def  get_width, justify, frame etc


# ' ùáÅ'  U+1D100  Musical symbol longa perfecta rest

# see: https://en.wikipedia.org/wiki/Box-drawing_character
# '‚îÄ'	U+2500	BOX DRAWINGS LIGHT HORIZONTAL
# '‚îÅ'	U+2501	BOX DRAWINGS HEAVY HORIZONTAL
# '‚îÇ'	U+2502	BOX DRAWINGS LIGHT VERTICAL
# '‚îÉ'	U+2503	BOX DRAWINGS HEAVY VERTICAL
# '‚ïå'	U+254C	BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL
# '‚ïç'	U+254D	BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL
# '‚ïé'	U+254E	BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL
# '‚ïè'	U+254F	BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL
# '‚îÑ'	U+2504	BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL
# '‚îÖ'	U+2505	BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL
# '‚îÜ'	U+2506	BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL
# '‚îá'	U+2507	BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL
# '‚îà'	U+2508	BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL
# '‚îâ'	U+2509	BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL
# '‚îä'	U+250A	BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL
# '‚îã'	U+250B	BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL
# '‚ïµ'   U+2575  BOX DRAWINGS LIGHT UP
# '‚ï∑'   U+2577  BOX DRAWINGS LIGHT DOWN
# '‚îå'	U+250C	BOX DRAWINGS LIGHT DOWN AND RIGHT
# '‚îç'	U+250D	BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY
# '‚îé'	U+250E	BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT
# '‚îè'	U+250F	BOX DRAWINGS HEAVY DOWN AND RIGHT
# '‚îê'	U+2510	BOX DRAWINGS LIGHT DOWN AND LEFT
# '‚îë'	U+2511	BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY
# '‚îí'	U+2512	BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT
# '‚îì'	U+2513	BOX DRAWINGS HEAVY DOWN AND LEFT
# '‚îî'	U+2514	BOX DRAWINGS LIGHT UP AND RIGHT
# '‚îï'	U+2515	BOX DRAWINGS UP LIGHT AND RIGHT HEAVY
# '‚îñ'	U+2516	BOX DRAWINGS UP HEAVY AND RIGHT LIGHT
# '‚îó'	U+2517	BOX DRAWINGS HEAVY UP AND RIGHT
# '‚îò'	U+2518	BOX DRAWINGS LIGHT UP AND LEFT
# '‚îô'	U+2519	BOX DRAWINGS UP LIGHT AND LEFT HEAVY
# '‚îö'	U+251A	BOX DRAWINGS UP HEAVY AND LEFT LIGHT
# '‚îõ'	U+251B	BOX DRAWINGS HEAVY UP AND LEFT
# '‚îú'	U+251C	BOX DRAWINGS LIGHT VERTICAL AND RIGHT
# '‚îù'	U+251D	BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY
# '‚îû'	U+251E	BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT
# '‚îü'	U+251F	BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT
# '‚î†'	U+2520	BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT
# '‚î°'	U+2521	BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY
# '‚î¢'	U+2522	BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY
# '‚î£'	U+2523	BOX DRAWINGS HEAVY VERTICAL AND RIGHT
# '‚î§'	U+2524	BOX DRAWINGS LIGHT VERTICAL AND LEFT
# '‚î•'	U+2525	BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY
# '‚î¶'	U+2526	BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT
# '‚îß'	U+2527	BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT
# '‚î®'	U+2528	BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT
# '‚î©'	U+2529	BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY
# '‚î™'	U+252A	BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY
# '‚î´'	U+252B	BOX DRAWINGS HEAVY VERTICAL AND LEFT
# '‚î¨'	U+252C	BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
# '‚î≠'	U+252D	BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT
# '‚îÆ'	U+252E	BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT
# '‚îØ'	U+252F	BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY
# '‚î∞'	U+2530	BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT
# '‚î±'	U+2531	BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY
# '‚î≤'	U+2532	BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY
# '‚î≥'	U+2533	BOX DRAWINGS HEAVY DOWN AND HORIZONTAL
# '‚î¥'	U+2534	BOX DRAWINGS LIGHT UP AND HORIZONTAL
# '‚îµ'	U+2535	BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT
# '‚î∂'	U+2536	BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT
# '‚î∑'	U+2537	BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY
# '‚î∏'	U+2538	BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT
# '‚îπ'	U+2539	BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY
# '‚î∫'	U+253A	BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY
# '‚îª'	U+253B	BOX DRAWINGS HEAVY UP AND HORIZONTAL
# '‚îº'	U+253C	BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
# '‚îΩ'	U+253D	BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT
# '‚îæ'	U+253E	BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT
# '‚îø'	U+253F	BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY
# '‚ïÄ'	U+2540	BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT
# '‚ïÅ'	U+2541	BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT
# '‚ïÇ'	U+2542	BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT
# '‚ïÉ'	U+2543	BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT
# '‚ïÑ'	U+2544	BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT
# '‚ïÖ'	U+2545	BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT
# '‚ïÜ'	U+2546	BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT
# '‚ïá'	U+2547	BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY
# '‚ïà'	U+2548	BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY
# '‚ïâ'	U+2549	BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY
# '‚ïä'	U+254A	BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY
# '‚ïã'	U+254B	BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL

# '‚ïê'	U+2550	BOX DRAWINGS DOUBLE HORIZONTAL
# '‚ïë'	U+2551	BOX DRAWINGS DOUBLE VERTICAL
# '‚ïí'	U+2552	BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
# '‚ïì'	U+2553	BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
# '‚ïî'	U+2554	BOX DRAWINGS DOUBLE DOWN AND RIGHT
# '‚ïï'	U+2555	BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
# '‚ïñ'	U+2556	BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
# '‚ïó'	U+2557	BOX DRAWINGS DOUBLE DOWN AND LEFT
# '‚ïò'	U+2558	BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
# '‚ïô'	U+2559	BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
# '‚ïö'	U+255A	BOX DRAWINGS DOUBLE UP AND RIGHT
# '‚ïõ'	U+255B	BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
# '‚ïú'	U+255C	BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
# '‚ïù'	U+255D	BOX DRAWINGS DOUBLE UP AND LEFT
# '‚ïû'	U+255E	BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
# '‚ïü'	U+255F	BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
# '‚ï†'	U+2560	BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
# '‚ï°'	U+2561	BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
# '‚ï¢'	U+2562	BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
# '‚ï£'	U+2563	BOX DRAWINGS DOUBLE VERTICAL AND LEFT
# '‚ï§'	U+2564	BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
# '‚ï•'	U+2565	BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
# '‚ï¶'	U+2566	BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
# '‚ïß'	U+2567	BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
# '‚ï®'	U+2568	BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
# '‚ï©'	U+2569	BOX DRAWINGS DOUBLE UP AND HORIZONTAL
# '‚ï™'	U+256A	BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE
# '‚ï´'	U+256B	BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE
# '‚ï¨'	U+256C	BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
# '‚ï≠'	U+256D	BOX DRAWINGS LIGHT ARC DOWN AND RIGHT
# '‚ïÆ'	U+256E	BOX DRAWINGS LIGHT ARC DOWN AND LEFT
# '‚ïØ'	U+256F	BOX DRAWINGS LIGHT ARC UP AND LEFT
# '‚ï∞'	U+2570	BOX DRAWINGS LIGHT ARC UP AND RIGHT
#
# \N{EM DASH}
# \N{CURLY BRACKET EXTENSION}

HLINES = {
    '':     ' ',
    ' ':    ' ',
    '-':    '‚îÄ',
    '=':    '‚ïê',
    '--':   '‚ïå',
    '.':    '‚îÑ',
    ':':    '‚îà',
    '_':    ' ',
    underline: ' ',
    # '+':    ''
}
HLINES_BOLD = {
    '':     ' ',
    ' ':    ' ',
    '-':    '‚îÅ',
    '--':   '‚ïç',
    '.':    '‚îÖ',
    ':':    '‚îâ',
}

VLINES = {
    '':     '',
    '-':    '‚îÇ',
    '|':    '‚îÇ',
    '=':    '‚ïë',
    '||':   '‚ïë',
    '--':   '‚ïé',
    '.':    '‚îÜ',
    ':':    '‚îä'
}
VLINES_BOLD = {
    '':     '',
    ' ':    '',
    '-':    '‚îÉ',
    '|':    '‚îÉ',
    '--':   '‚ïè',
    '.':    '‚îá',
    ':':    '‚îã'
}

CORNERS = {
    '':         [''] * 4,
    ' ':        '    ',
    'round':    '‚ï≠‚ïÆ‚ï∞‚ïØ',
    'square':   '‚îå‚îê‚îî‚îò',
    'L':        '‚îå‚îê‚îî‚îò',
    'double':   '‚ïî‚ïó‚ïö‚ïù',
    '=':        '‚ïî‚ïó‚ïö‚ïù',
    # ‚óú‚óù ‚óü‚óû
    'o':        '‚ó∂‚óµ‚ó∑‚ó¥',
    'circle':   '‚ó∂‚óµ‚ó∑‚ó¥',
    'triangle': '‚ó§‚ó•‚ó£‚ó¢',
    'block':    '‚ó≤‚ó±‚ó≥‚ó∞',
    # ‚óÜ 	BLACK DIAMOND
    # ‚óá 	WHITE DIAMOND
    # ‚ñ† 	BLACK SQUARE
    # ‚ñ° 	WHITE SQUARE

}
CORNERS_BOLD = {
    # 'round': '',
    'square': '‚îè‚îì‚îó‚îõ',
    # 'double': ''
}


def resolve_line(char):
    if char is underline:
        return underline, ' '

    char = str(char) or ''
    assert len(char) < 2
    return echo0, char


# @tag_defaults
def _get_corners(corners, bold):
    if corners is not None:
        return CORNERS[corners]

    if bold:
        return CORNERS_BOLD['square']

    return CORNERS['round']
    # corners = str(corners)
    # assert len(corners) == 4


def textbox(text,
            style='_',
            bold=False,
            color=None,
            **kws):
    """
    High level function that wraps multi-line strings in a text box. The
    parameters `top`, `bottom`, `left` and `right` are mapped to unicode
    box drawing symbols.

    Parameters
    ----------
    text : [type]
        [description]
    style : str
        frame style
    bold : bool, optional
        [description], by default False
    color : [type], optional
        [description], by default None

    Examples
    --------
    >>> 

    Returns
    -------
    [type]
        [description]
    """
    # textbox(style='')
    # textbox(style='-')
    # textbox(style='=')
    # textbox(style='.')

    hlines = (HLINES, HLINES_BOLD)[bold]
    vlines = (VLINES, VLINES_BOLD)[bold]
    # corners_ = (CORNERS, CORNERS_BOLD)[bold]

    # kws.pop('sides', None)
    if style is None:
        return text

    if style == '_':
        return AnsiBox(**kws)(text)

    if style == '+':
        return GridFrameBox(**kws)(text)

    # top = bottom = left = right = style
    top = bottom = hlines[style]
    # bottom = hlines[bottom] if bottom is not None else top
    left = right = vlines[style]
    # right = vlines[right] if right is not None else left
    # corners = corners_[corners]
    corners = CORNERS.get(style, None)

    if 'sides' in kws:
        sides = kws.pop('sides') or ''
        left, right = duplicate_if_scalar(sides)
        corners = corners or sides

    if corners is None:
        corners = _get_corners(corners, bold)

    return TextBox(top, bottom, left, right, corners, color)(text, **kws)

#  TODO: AsciiTextBox


# null singleton for default identification
NULL = object()


class TextBox:
    """
    Flexible box drawing.
    """

    def __init__(self,
                 #  fmt='{text: {align}{width}|{fg}/{bg}}'
                 top='\N{BOX DRAWINGS LIGHT HORIZONTAL}',
                 bottom=NULL,
                 left='\N{BOX DRAWINGS LIGHT VERTICAL}',
                 right=NULL,
                 corners='‚ï≠‚ïÆ‚ï∞‚ïØ',
                 colors=(),
                 **kws):
        """
        Initialize the TextBox. This object works at a lower level than the
        `textbox` function. The parameters `top`, `bottom`, `left` and `right`
        are used directly as characters for the frame, repeating until the space
        is filled.
        """

        # TODO: parse stylized input for sides

        self.left = str(left)
        self.right = str(left if right is NULL else right or '')
        self.top = top
        self.bottom = top if bottom is NULL else bottom
        self.corners = corners

        self.colors = duplicate_if_scalar(kws.get('color', colors) or '', 4)

    def __call__(self, text='', width=None, height=None, align='^'):
        text = str(text)
        text_width = get_width(text)
        if width is None:
            width = text_width + len(self.left) + len(self.right)
        else:
            width = resolve_width(width)
            if text_width > width:
                wrn.warn(f'Text too wide for box {text_width} > {width}.')

        return '\n'.join(self._iter_lines(text, width, align))

    # line_formats = {
    #     'top': '{{corners[0]}{{top}:{top}^{width}}{corners[1]}:|{colors[0]}}',
    #     'bot': '{{corners[2]}{{bot}:{bot}^{width}}{corners[3]}:|{colors[1]}}',
    #     'mid': '{left:|{colors[2]}}{line: {align}{width}}{right:|{colors[3]}}'
    # }
    line_fmt = '{left:|{colors[2]}}{line: {align}{width}}{right:|{colors[3]}}'

    def _iter_lines(self, text, width, align, **kws):
        width = width - len(self.left) - len(self.right)
        kws = {**locals(), **vars(self), **kws}
        kws.pop('self')
        yield make_hline(self.top, self.corners[:2], width, self.colors[0])

        line_fmt = format_partial(self.line_fmt, **kws)
        for line in text.splitlines():
            yield format(line_fmt, **kws, line=line)

        if self.bottom:
            yield make_hline(self.bottom, self.corners[2:], width, self.colors[1])


def make_hline(characters, corners, width, color):
    n = len(characters)
    line = (characters * (width // n) + characters[:(width % n)]).join(corners)
    return apply(line, color)


class AnsiBox(TextBox):
    def __init__(self, **kws):
        super().__init__(**{**dict(top=' ',
                                   corners=CORNERS[' '],
                                   colors=('_', '', '', '')),
                            **kws})

    def _iter_lines(self, text, width, align, **kws):
        # from IPython import embed
        # embed(header="Embedded interpreter at 'src/motley/textbox.py':386")
        itr = super()._iter_lines(text, width, align)
        itr = mit.islice_extended(itr)
        upto = text.count('\n') + bool(self.top) - bool(self.bottom) #- 1
        yield from itr[:upto]
        yield underline(next(itr))


class GridFrameBox(AnsiBox):
    def __init__(self, **kws):
        super().__init__(**{**dict(top='ùáÅ ',  # ' ‚ï∑',
                                   bottom=' ùáÅ',  # ' ‚ïµ',
                                   left='‚ñï',
                                   right='‚ñè',
                                   color='_',  # underline
                                   corners=(' ', 'ùáÅ', '', '')),
                            **kws})

    def _iter_lines(self, text, width, align, **kws):
        bottom = self.bottom
        self.bottom = ' '
        yield from super()._iter_lines(text, width, align)
        self.bottom = bottom
        yield make_hline(bottom, self.corners[2:], width, '')


class TickedGridFrame(GridFrameBox):
    def __init__(self, xticks=(), yticks=(), **kws):
        self.xticks = list(xticks)
        self.yticks = list(yticks)

    def _iter_lines(self, text, width, align):
        itr = super()._iter_lines(text, width, align)
        for tick, line in itt.zip_longest(self.yticks, itr, fill_value=None):
            yield tick + line

        if self.xticks:
            yield ''.join(self.xticks)
